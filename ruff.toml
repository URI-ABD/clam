select = [
  "F",   # pyflakes
  "E",   # pycodestyle errors
  "W",   # pycodestyle warnings
  "C90", # mccabe
  "I",   # isort
  "N",   # pep8-naming
  "D",   # pydocstyle
  "UP",  # pyupgrade
  "ANN", # flake8-annotations
  "S",   # flake8-bandit
  "BLE", # flake8-blind-except
  "B",   # flake8-bugbear
  "A",   # flake8-builtins
  "COM", # flake8-commas
  "C4",  # flake8-comprehensions
  "EM",  # flake8-errmsg
  "INP", # flake8-no-pep420
  "T20", # flake8-print
  "PYI", # flake8-pyi, type-hinting stub files
  "PT",  # flake8-pytest-style
  "RSE", # flake8-raise
  "RET", # flake8-return
  "SIM", # flake8-simplify
  "ARG", # flake8-unused-arguments
  "ERA", # flake8-eradicate
  "PTH", # flake8-use-pathlib
  "PL",  # pylint
  "FLY", # flynt
  "NPY", # NumPy-specific rules
  "RUF", # Ruff-specific rules
]
ignore = [
  "ANN101",  # Missing type annotation for self in method
  "ANN102",  # Missing type annotation for cls in classmethod
  "PLR2004", # Use of magic value in comparison
  "ANN401",  # Dynamically typed expressions are disallowed
]
unfixable = ["B"] # Avoid trying to fix flake8-bugbear violations.
target-version = "py39" # Assume Python 3.9.

[mccabe]
# Default to a complexity level of 10.
max-complexity = 10

[pydocstyle]
convention = "google"

[per-file-ignores]
"__init__.py" = ["F401"] # Unused import.
"python/**/test_*.py" = [
  "ANN001", # Missing type annotation for function argument.
  "ANN003", # Missing type annotation for **kwargs.
  "ANN201", # Missing return type annotation for public function.
  "ANN205", # Missing return type annotation for staticmethod.
  "D101",   # Missing docstring in public class.
  "D102",   # Missing docstring in public method.
  "D103",   # Missing docstring in public function.
  "D100",   # Missing docstring in public module.
  "NPY002", # Replace legacy `np.random.randn` call with `np.random.Generator`.
  "PT009",  # Use of a regular `assert` instead of unittest-style.
  "RET504", # Unecessary variable assignment before `return` statement.
  "S101",   # Use of assert detected.
]
"python/abd_clam/**/*.py" = [
  "ANN002",  # Missing type annotation for *args.
  "ANN003",  # Missing type annotation for **kwargs.
  "D100",    # Missing docstring in public module.
  "D103",    # Missing docstring in public function.
  "PLR0911", # Too many return statements
]
"python/abd_clam/anomaly_detection/pretrained_models.py" = [
  "PLR5501", # Use `elif` instead of `else` then `if`.
  "RET505",  # Unecessary `else` after `return`.
]

[isort]
force-single-line = true
